#include <stdio.h>
#include <stdlib.h>
#include "pila.h"

void cargarPila (Pila* dada);
void cambiarPila(Pila* dada, Pila* otra);
void mismoOrdenDePila (Pila* dada, Pila* otra);
int encontrarMenor (Pila* dada);
void nuevaPilaOrdenada (Pila* dada, Pila* otra);
void elementoOrdenado (Pila* dada) ;



int main()
{
    Pila pilaA, pilaB;
    inicpila(&pilaA);
    inicpila(&pilaB);
    int cantidad, topeMenor;

    printf("Quieres agregar un elemento a la pila PILONA  1 = si , 0 = no \n");
    scanf("%i", &cantidad);

    while (cantidad == 1)
    {
        cargarPila(&pilaA);
        printf("Quieres agregar un elemento a la pila PILONA  1 = si , 0 = no \n");
        scanf("%i", &cantidad);
    }


    printf("\n\n -------------Mostramos la pila cargada---------------------------- \n\n");
    mostrar(&pilaA);


    printf("\n\n -----------Pasamos todos los elementos de una pila a otra---------- \n\n");

    cambiarPila(&pilaA, &pilaB);


    printf("\n\n ------------Mismo orden en otra pila--------------------------------\n\n");

    mismoOrdenDePila(&pilaA, &pilaB);

    printf("\n\n ------------------Encontrar el menor de la pila---------------------\n\n");

    topeMenor = encontrarMenor(&pilaA);

    printf("\n\nEl menor elemento es %i \n\n", topeMenor);

    mostrar(&pilaA);
    printf("\n\n-----------------Ingrese mas elementos a la pila--------------------------\n\n");

    cantidad = 1;
    while (cantidad == 1)
    {
        cargarPila(&pilaA);
        printf("Quieres agregar un elemento a la pila PILONA  1 = si , 0 = no \n");
        scanf("%i", &cantidad);
    }
    printf("\n\n -------------------------Pila recargada------------------------------\n\n");

    mostrar(&pilaA);

    printf("\n\n----------------------- Nueva Pila ordenada-------------------------------\n\n");


    nuevaPilaOrdenada(&pilaA, &pilaB);

    mostrar(&pilaB);

    printf("\n\n--------------------Ingresar un elemento en una pila oredanda--------------\n\n");

    elementoOrdenado (&pilaB);

    mostrar(&pilaB);


    return 0;
}


void cargarPila(Pila* dada)
{

    int elemento;

    printf("Ingrese un elemento");
    scanf("%i", &elemento);

    apilar(dada, elemento);
}


void cambiarPila(Pila* dada, Pila* otra)
{

    while (!pilavacia(dada))
    {

        apilar(otra, desapilar(dada));
    }

    printf("\npilaA\n");
    mostrar(dada);
    printf("\n pilaB\n");
    mostrar(otra);

}


void mismoOrdenDePila (Pila* dada, Pila* otra)
{

    Pila aux;
    inicpila(&aux);


    while (!pilavacia(otra))
    {
        apilar(&aux, desapilar(otra));
    }

    while(!pilavacia(&aux))
    {
        apilar(dada, desapilar(&aux));
    }


    printf("\n  pila A\n");
    mostrar(dada);
    printf("\n pila B \n");
    mostrar(otra);

}

int encontrarMenor (Pila* dada)
{
    Pila aux, aux2;

    inicpila(&aux);
    inicpila(&aux2);

    int topeMenor;

    apilar(&aux, desapilar(dada));

    while(!pilavacia(dada))
    {

        if(tope(dada) < tope(&aux))
        {
            apilar(&aux2, desapilar(&aux));
            apilar(&aux, desapilar(dada));

        }

        else
        {
            apilar(&aux2, desapilar(dada));
        }
    }


    while(!pilavacia(&aux2))
    {

        apilar(dada, desapilar(&aux2));
    }
    topeMenor = tope(&aux);
    return topeMenor;

    int elemento;

    printf("Elemento para la piloneta");
    scanf("%i", &elemento);

    apilar(dada, elemento);
}

void nuevaPilaOrdenada (Pila* dada, Pila* otra)
{


    Pila aux;
    inicpila(&aux);
    apilar(otra, desapilar(dada));


    while(!pilavacia(dada))
    {
        if (tope(dada) > tope(otra))
        {
            apilar(otra, desapilar(dada));
        }
        else
        {
            while (tope(dada) < tope(otra))
            {
                apilar(&aux, desapilar(otra));
                apilar(otra, desapilar(dada));
            }

            while (!pilavacia(&aux))
            {
                apilar(otra, desapilar(&aux));
            }

        }
    }
}



void elementoOrdenado (Pila* dada)
{

    Pila aux;

    inicpila(&aux);
    int elemento;
    printf("Ingrese un elemento para agregar a la pila");

    scanf("%i", &elemento);


    if(elemento > tope(dada))
    {
        apilar(dada, elemento);
    }
    else
    {

        while (elemento < tope(dada)  && pilavacia(dada))
        {

            apilar(&aux, desapilar(dada));
        }

        apilar(dada, elemento);

        while(!pilavacia(&aux))
        {

            apilar(dada, desapilar(&aux));
        }
    }


}

