#include <stdio.h>
#include <stdlib.h>
#define maxFilas 5
#define maxColumnas 3

#define maxLetras 30
#define maxPalabras 21

#define maxFilasA 2
#define maxColumnasA 2

#define maxFilasB 2
#define maxColumnasB 5

#define maxFilasSimetrica 3
#define maxColumnasSimetrica 3




void cargarMatriz(int matriz[maxFilas][maxColumnas]);
void cargarMatrizA(int matriz[maxFilasA][maxColumnasA]);
void cargarMatrizB(int matriz[maxFilasB][maxColumnasB]);
void mostrarMatriz (int matriz[maxFilas][maxColumnas]);
void mostrarMatrizA (int matriz[maxFilasA][maxColumnasA]);
void mostrarMatrizAFloat(float matriz[maxFilasA][maxColumnasA]);
void mostrarMatrizB (int matriz[maxFilasB][maxColumnasB]);
void cargarAleatorio(int matriz[maxFilas][maxColumnas]);
int sumarMatriz ( int matriz[maxFilas][maxColumnas]);
void promedioMatriz (int matriz[maxFilas][maxColumnas]);
void buscarDato(int matriz[maxFilas][maxColumnas], int dato);
int cargarStrings(char palabras[maxPalabras][maxLetras]);
void mostrarArreglo(char palabras[maxPalabras][maxLetras], int palabrasIngresadas);
void buscarPalabra (char palabras[maxPalabras][maxLetras], int palabrasIngresadas, char palabraBuscada[maxLetras]);
void ordenarSeleccion (char palabras[maxPalabras][maxLetras], int palabrasIngresadas);
int elementoMenor(char palabras[maxPalabras][maxLetras], int i, int palabrasIngresadas);
int encontrarDeterminante(int matrizA[maxFilasA][maxColumnasA]);
void inversaMatriz(int matrizA[maxFilasA][maxColumnasA]);
void multiplicarMatriz(int matrizA[maxFilasA][maxColumnasA],int matrizB[maxFilasB][maxColumnasB]);
void calcualrMatrizInversa(int matrizA[maxFilasA][maxColumnasA]);
void matrizCofactores( int matrizA[maxFilasA][maxColumnasA],float matrizC[maxFilasA][maxColumnasA]);
void matrizTraspuesta (float matrizC[maxFilasA][maxColumnasA], int matrizAdj[maxFilasA][maxColumnasA]) ;
void elecciones();
void mostrarArregloNum(float array[], int validos);
int sumaElecciones(int elecciones[5][5], int votos[4]);
void mostrarArregloNumInt(int array[], int validos);
int sumarVotos( int votos[4]);
void calcularPorcentaje(int votos[4], int votosTotales, float porcentaje[4]);
int candidatoElecto(int votos[4]);
int ganadorElecciones(float porcentaje[4]);
void masVotados(float porcentaje[4], char encabezado[5][20]);
int segundoGanador(float porcentaje[4]);


int main()
{
    int operador;
    int valor = 1;

    //DECLARACION MATRIZ GENERAL
    int matriz[maxFilas][maxColumnas];

    int dato;
    char palabras[maxPalabras][maxLetras];
    int palabrasIngresadas;
    char palabraBuscada[maxLetras];

    int matrizA[maxFilasA][maxColumnasA];
    int matrizB[maxFilasB][maxColumnasB];
    
    int matrizS[maxFilasSimetrica][maxColumnasSimetrica];




    while(valor == 1)
    {

        printf("Que punto queres hacer? \nPunto 1 = 1\nPunto 2 = 2\nPunto 3 = 3\nPunto 4 = 4\nPunto 5 = 5\nPunto 6 = 6\nPunto 7 = 7\nPunto 8 = 8\nPunto 9 = 9\nPunto 10 = 10\nPunto 11 = 11\nPunto 12 = 12\nPunto 13 = 13\nPunto 14 = 14\nPunto 15 = 15\nPunto 16 = 16\n");
        scanf("%i", &operador);


        switch(operador)
        {

        case 1:

            cargarMatriz(matriz);
            mostrarMatriz(matriz);
            break;

        case 2:


            mostrarMatriz(matriz);
            break;

        case 3:
            cargarAleatorio(matriz);
            mostrarMatriz(matriz);
            break;

        case 4:
            cargarMatriz(matriz);
            sumarMatriz(matriz);
            break;

        case 5:
            cargarMatriz(matriz);
            promedioMatriz(matriz);
            break;

        case 6:

            printf(" Que dato desea buscar ");
            scanf("%i", &dato);
            buscarDato(matriz, dato);
            break;

        case 7:
            palabrasIngresadas = cargarStrings(palabras);
            mostrarArreglo(palabras, palabrasIngresadas);
            break;

        case 9:
            printf("Que palabra desea buscar: ");
            fflush(stdin);
            gets(palabraBuscada);
            buscarPalabra(palabras, palabrasIngresadas, palabraBuscada);
            break;

        case 11:

            ordenarSeleccion(palabras, palabrasIngresadas);
            mostrarArreglo(palabras, palabrasIngresadas);
            break;

        case 12:

            cargarMatrizA(matrizA);
            encontrarDeterminante(matrizA);
            break;

        case 13:
            cargarMatrizA(matrizA);
            inversaMatriz(matrizA);
            break;

        case 14:
            printf("MATRIZ A (2X2)\n");
            cargarMatrizA(matrizA);
            printf("\nMATRIZ B (2X5)\n");
            cargarMatrizB(matrizB);
            multiplicarMatriz(matrizA, matrizB);
            break;

        case 15:
            cargarMatrizA(matrizA);
            calcualrMatrizInversa(matrizA);
            break;

        case 16:
            elecciones();
            break;
        }
        
        case 17:
            cargarMatrizS(matrizS);
            

        printf("\nDesea hacer otro punto?\n1:SI\n");
        scanf("%i", &valor);



    }






    //---------------------------------------------------




    return 0;
}

void cargarMatriz(int matriz[maxFilas][maxColumnas])
{

    int i, j;

    for (i = 0; i < maxFilas; i++ )
    {

        for(j = 0; j < maxColumnas; j++)
        {

            printf("Inserte valor a la matriz: ");
            scanf("%i", &matriz[i][j]);

        }
    }
}

void cargarMatrizS(int matrizS[maxFilasSimetrica][maxColumnasSimetrica])
{

    int i, j;

    for (i = 0; i < maxFilasSimetrica; i++ )
    {

        for(j = 0; j < maxColumnasSimetrica; j++)
        {

            printf("Inserte valor a la matriz: ");
            scanf("%i", &matrizS[i][j]);

        }
    }
}

void cargarMatrizA(int matriz[maxFilasA][maxColumnasA])
{

    int i, j;

    for (i = 0; i < maxFilasA; i++ )
    {

        for(j = 0; j < maxColumnasA; j++)
        {

            printf("Inserte valor a la matriz: ");
            scanf("%i", &matriz[i][j]);

        }
    }
}

void cargarMatrizB(int matriz[maxFilasB][maxColumnasB])
{

    int i, j;

    for (i = 0; i < maxFilasB; i++ )
    {

        for(j = 0; j < maxColumnasB; j++)
        {

            printf("Inserte valor a la matriz: ");
            scanf("%i", &matriz[i][j]);

        }
    }
}

void mostrarMatriz (int matriz[maxFilas][maxColumnas])
{

    int i;
    int j;

    for (i = 0; i < maxFilas; i++ )
    {

        for(j = 0; j < maxColumnas; j++)
        {

            printf("%i  ", matriz[i][j]);

        }
        printf("\n");
    }
}

void mostrarMatrizA (int matriz[maxFilasA][maxColumnasA])
{

    int i;
    int j;

    for (i = 0; i < maxFilasA; i++ )
    {

        for(j = 0; j < maxColumnasA; j++)
        {

            printf("%i  ", matriz[i][j]);

        }
        printf("\n");
    }
}


void mostrarMatrizAFloat(float matriz[maxFilasA][maxColumnasA])
{


    int i;
    int j;

    for (i = 0; i < maxFilasA; i++ )
    {

        for(j = 0; j < maxColumnasA; j++)
        {

            printf("%.2f  ", matriz[i][j]);

        }
        printf("\n");
    }
}





void mostrarMatrizB (int matriz[maxFilasB][maxColumnasB])
{

    int i;
    int j;

    for (i = 0; i < maxFilasB; i++ )
    {

        for(j = 0; j < maxColumnasB; j++)
        {

            printf("%i  ", matriz[i][j]);

        }
        printf("\n");
    }
}



void cargarAleatorio(int matriz[maxFilas][maxColumnas])
{

    int i, j, dato;

    for (i = 0; i < maxFilas; i++ )
    {

        for(j = 0; j < maxColumnas; j++)
        {

            dato = rand() % 100 + 1;


            matriz[i][j] = dato;

        }
    }
}


int sumarMatriz ( int matriz[maxFilas][maxColumnas])
{

    int i, j, resultado = 0;

    for (i = 0; i < maxFilas; i++ )
    {

        for(j = 0; j < maxColumnas; j++)
        {

            resultado = resultado + matriz[i][j];

        }
    }


    printf("\n EL resultado de la suma de la mtriz es: %i", resultado);

    return resultado;
}


void promedioMatriz (int matriz[maxFilas][maxColumnas])
{

    int resultado = sumarMatriz(matriz);

    int elementos = maxColumnas * maxFilas;

    float promedio;
    promedio = (float)resultado / (float)elementos;


    printf("\n El promedio de tu matriz es: %.2f", promedio);

}


void buscarDato(int matriz[maxFilas][maxColumnas], int dato)
{


    int i, j;

    for (i = 0; i < maxFilas; i++ )
    {

        for(j = 0; j < maxColumnas; j++)
        {

            if (dato == matriz[i][j])
            {

                printf(" El dato %i, se encuentra en la matriz  ", dato);
            }
        }
    }
}


int cargarStrings(char palabras[maxPalabras][maxLetras])
{


    int valor = 1;
    int i = 0;

    while((valor == 1) && (i < maxPalabras))
    {

        fflush(stdin);
        printf("\nCargar el string\n ");
        scanf("%s", &palabras[i]);

        i++;
        printf("\n1:SEGUIR\n0:CORTAR\n");
        scanf("%i", &valor);
    }

    return i;
}

void mostrarArreglo(char palabras[maxPalabras][maxLetras], int palabrasIngresadas)
{

    int i;

    for (i = 0; i < palabrasIngresadas; i++)
    {

        printf("%s\n", palabras[i]);
    }
}


void buscarPalabra (char palabras[maxPalabras][maxLetras], int palabrasIngresadas, char palabraBuscada[maxLetras])
{


    int i = 0;


    while (i < palabrasIngresadas)
    {

        if (strcmp(palabras[i], palabraBuscada )== 0)
        {


            printf("La palabra %s esta en la matriz \n", palabraBuscada);
        }
        i++;
    }


}

int elementoMenor(char palabras[maxPalabras][maxLetras], int i, int palabrasIngresadas)
{

    char menor[maxLetras];
    strcpy(menor, palabras[i]);
    int posicion = i;
    int u = i + 1;


    while(u < palabrasIngresadas)
    {

        if(strcmp(menor, palabras[u]) > 0)
        {

            strcpy(menor, palabras[u]);
            posicion = u;
        }
        u++;
    }
    return posicion;
}


void ordenarSeleccion (char palabras[maxPalabras][maxLetras], int palabrasIngresadas)
{

    int posmenor;
    int i = 0;
    char aux[maxLetras];

    while (i < palabrasIngresadas - 1)
    {

        posmenor = elementoMenor(palabras, i, palabrasIngresadas);

        strcpy(aux, palabras[posmenor]);
        strcpy(palabras[posmenor], palabras[i]);
        strcpy(palabras[i], aux);
        i++;
    }
}

int encontrarDeterminante(int matrizA[maxFilasA][maxColumnasA])
{

    int i = 0;
    int j = 0;
    int resultado;
    resultado = ( matrizA[i][j]* matrizA[i+1][j+1])-( matrizA[i][j+1]* matrizA[i+1][j]);


    printf("El determinante de la matriz A es: %i  \n", resultado);

    return resultado;
}


void inversaMatriz(int matrizA[maxFilasA][maxColumnasA])
{

    int resultado = encontrarDeterminante(matrizA);

    if (resultado == 0)
    {

        printf("La matriz no tiene inversa \n");
    }
    else
    {
        printf("La matriz tiene inversa  \n");
    }





}




void multiplicarMatriz(int matrizA[maxFilasA][maxColumnasA], int matrizB[maxFilasB][maxColumnasB])
{

    int iA= 0;
    int jA = 0;
    int iB = 0;
    int jB = 0;
    int iR = 0;
    int jR = 0;



    int matrizR[maxFilasB][maxColumnasB];
    int resultado;



    if(maxColumnasA != maxFilasB)
    {
        printf("No se puede multplicar ya que la cantidad columnas de la matriz A son distinas a la cantidad de filas de la matriz B");
        return 0;
    }




    while(jA < maxColumnasA && iA < maxFilasA)
    {
        jB = 0;
        jR = 0;

        while(jB < maxColumnasB && iB < maxFilasB)
        {

            resultado = (((matrizA[iA][jA])*(matrizB[iB][jB])) + ((matrizA[iA][jA+1]*matrizB[iB+1][jB])));
            matrizR[iR][jR] = resultado;

            jB++;
            jR++;
        }
        iR++;
        iA++;

    }

    printf("\nLa matriz R es la siguiente:\n");
    mostrarMatrizB(matrizR);

}




void calcualrMatrizInversa(int matrizA[maxFilasA][maxColumnasA])
{

    float matrizC[maxFilasA][maxColumnasA];
    float matrizI[maxFilasA][maxColumnasA];
    int determinate = encontrarDeterminante(matrizA);
    int matrizAdj[maxFilasA][maxColumnasA];


    if (determinate == 0)
    {

        printf("El determiante es 0 por lo tanto no tiene inversa");
        return 0;
    }

    matrizCofactores(matrizA, matrizC);
    matrizTraspuesta(matrizC, matrizAdj);


    matrizI[0][0] = (((float)matrizAdj[0][0])/determinate);
    matrizI[0][1] = (((float)matrizAdj[0][1])/determinate);
    matrizI[1][0] = (((float)matrizAdj[1][0])/determinate);
    matrizI[1][1] = (((float)matrizAdj[1][1])/determinate);




    mostrarMatrizAFloat(matrizI);

}


void matrizCofactores( int matrizA[maxFilasA][maxColumnasA],float matrizC[maxFilasA][maxColumnasA])
{


    matrizC[0][0] = matrizA[1][1];
    matrizC[0][1] = -(matrizA[1][0]);
    matrizC[1][0] = -(matrizA[0][1]);
    matrizC[1][1] = matrizA[0][0];

}

void matrizTraspuesta (float matrizC[maxFilasA][maxColumnasA], int matrizAdj[maxFilasA][maxColumnasA])
{


    matrizAdj[0][0] = matrizC[0][0];
    matrizAdj[0][1] = matrizC[1][0];
    matrizAdj[1][0] = matrizC[0][1];
    matrizAdj[1][1] = matrizC[1][1];

}

void elecciones()
{


    int elecciones [5][5];

    char encabezado[5][20];



    elecciones[0][0] = 1;
    elecciones[0][1] = 194;
    elecciones[0][2] = 48;
    elecciones[0][3] = 206;
    elecciones[0][4] = 45;
    elecciones[1][0] = 2;
    elecciones[1][1] = 180;
    elecciones[1][2] = 20;
    elecciones[1][3] = 320;
    elecciones[1][4] = 16;
    elecciones[2][0] = 3;
    elecciones[2][1] = 221;
    elecciones[2][2] = 90;
    elecciones[2][3] = 140;
    elecciones[2][4] = 20;
    elecciones[3][0] = 4;
    elecciones[3][1] = 432;
    elecciones[3][2] = 51;
    elecciones[3][3] = 821;
    elecciones[3][4] = 14;
    elecciones[4][0] = 5;
    elecciones[4][1] = 820;
    elecciones[4][2] = 61;
    elecciones[4][3] = 946;
    elecciones[4][4] = 18;



    strcpy(encabezado[0], "Distrito   ");
    strcpy(encabezado[1], "Candidato A  ");
    strcpy(encabezado[2], "Candidato B ");
    strcpy(encabezado[3], "Candidato C  ");
    strcpy(encabezado[4], "Candidato D");


    int i;
    int j;
    int z;

    for (z = 0; z < 5; z++)
    {

        printf("|%s ", encabezado[z]);
    }
    printf("\n");



    for (i = 0; i < 5; i++ )
    {

        for(j = 0; j < 5; j++)
        {

            printf("|%i           ", elecciones[i][j]);

        }

        printf("\n");

    }

    int votos[4];
    float porcentaje[4];


    sumaElecciones(elecciones, votos);

    int votosTotales = sumarVotos(votos);
      printf("\n\nSuma de los votos totales: %i\n", votosTotales);


    calcularPorcentaje(votos, votosTotales, porcentaje);


    printf("\nPorcentaje de votos de cada candidato: \n");
    mostrarArregloNum(porcentaje, 4);


    int posElecto = candidatoElecto(votos);

    printf(" \n\n El candidato con mas votos es %s \n", encabezado[posElecto]);

    int ganador = ganadorElecciones(porcentaje);

    printf(" El candidato con mas de 50 porciento de votos es el %scon un porcentaje del: %.2f",encabezado[ganador + 1], porcentaje[ganador]);

    masVotados(porcentaje, encabezado);

}

int sumaElecciones(int elecciones[5][5], int votos[4]){


    int i;
    int j;
    int k = 0;


    int suma = 0;


    for (j = 1; j < 5; j++)
    {

        for (i = 0; i < 5; i++)
        {


            suma = suma + elecciones[i][j];


        }

        votos[k] = suma;
        k++;

        suma = 0;
    }
    printf("\nSuma de votos de cada candidato: \n");
    mostrarArregloNumInt(votos, 4);
}

int sumarVotos( int votos[4]){

    int i;
    int votosTotales= 0;

    for (i = 0; i< 4; i++)
    {


        votosTotales = votosTotales + votos[i];

    }


    return votosTotales;
}

void calcularPorcentaje(int votos[4], int votosTotales, float porcentaje[4]){

    int i;

    float resultado = 0;


    for (i = 0; i < 4; i++)
    {
        resultado = (((float)votos[i] * 100) / (float)votosTotales);

        porcentaje[i] = resultado;
        resultado = 0;
    }

}

int candidatoElecto(int votos[4]) {

int i = 0;

int menor = votos[i];
int posMenor = i;



for (i; i < 4; i++) {

    if(menor > votos[i]) {

        menor = votos[i];
        posMenor = i;
    }

}

return posMenor;
}

int ganadorElecciones(float porcentaje[4]) {

int i;
int pos;

for ( i = 0; i < 4; i++) {

    if (porcentaje[i] > 50) {

        pos  = i;

        return pos;

    }
}


printf("Ninguno de los candidatos supero el 50 porciento");
return 0;
}

void masVotados(float porcentaje[4], char encabezado[5][20]){

int posGanador = ganadorElecciones(porcentaje);


if(porcentaje[posGanador] >= 50){
    printf("\n No hay segunda vuelta\n");
    return 0;}

    int posSegundo = segundoGanador(porcentaje);

    printf("\nLos candidatos que pasan a la segunda vuelta son: \n%s\n %s \n", encabezado[posGanador], encabezado[posSegundo]);

}

int segundoGanador(float porcentaje[4]){

    int i = 0;
    int posSegundo = i;
    int segundo = porcentaje[i];

    int posGanador = ganadorElecciones(porcentaje);


    for(i; i < 4; i++){

    if((segundo > porcentaje[i]) && segundo < porcentaje[posGanador]){

        segundo = porcentaje[i];
        posSegundo = i;

    }
    }
    return posSegundo;
}

void mostrarArregloNum(float array[], int validos){

    int i;
 printf("\n");
    for(i = 0; i < validos; i++)
    {


        printf("%.2f   ",(float) array[i]);
    }
}

void mostrarArregloNumInt(int array[], int validos){

    int i;
 printf("\n");
    for(i = 0; i < validos; i++)
    {

        printf("%i   ",array[i]);
    }
}


void matrizSimetrica(matriz[maxFilasSimetrica][maxColumnasSimetrica]){
        
            int i = 0;
            int j = ;
            int k;
            for ( k = 0; k < maxFilasSimetrica; k++ ){
    
                if((matrizS[i][j+1]) != (matrizS[i+1][j])){
                        
                    return 0;
                }
                
                else {
                        
                    j++;
                    i++;
                }
                
                
            }




}


